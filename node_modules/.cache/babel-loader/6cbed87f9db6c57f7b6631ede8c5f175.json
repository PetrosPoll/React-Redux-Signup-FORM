{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\"; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 20,\n    marginTop: 30\n  },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    padding: 15,\n    marginTop: 20\n  },\n  textField: {\n    width: 300,\n    marginTop: 20\n  },\n  birthday: {\n    // width: 300,\n    marginTop: 20\n  }\n}));\n\nconst Step2 = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  const [birthday, setBirthday] = useState(\"\"); // Handler function for email input\n\n  const emailChangeHandler = e => {\n    // Validate and trim and change the operations\n    if (validator.isEmail(e.target.value.trim())) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\",\n        error: \"\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        email: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Failed\",\n        error: \"Invalid email\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      px: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      id: \"paperStyle\",\n      className: classes.paperStyle,\n      sx: {\n        maxWidth: 500,\n        my: 1,\n        mx: \"auto\",\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        wrap: \"wrap\",\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              textAlign: \"center\"\n            },\n            component: \"div\",\n            variant: \"h5\",\n            children: [/*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 46\n            }, this), \"Step 1\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.textField,\n            label: \"email\",\n            defaultValue: formData === null || formData === void 0 ? void 0 : formData.email,\n            variant: \"outlined\",\n            type: \"text\",\n            name: \"Email\",\n            onChange: emailChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 195\n          }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              label: \"Birthday date\",\n              value: birthday,\n              onChange: newValue => {\n                setBirthday(newValue);\n\n                if (newValue !== null) {\n                  const newFormatDate = newValue.getUTCMonth() + 1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                  dispatch(updateForm({\n                    dateBirth: newFormatDate\n                  }));\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.birthday,\n                variant: \"outlined\",\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), nextOperations.error && /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        maxWidth: 500,\n        my: 1,\n        mx: \"auto\",\n        p: 2\n      },\n      className: classes.errorCard,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"div\",\n            paragraph: true,\n            className: classes.error,\n            variant: \"body1\",\n            children: /*#__PURE__*/_jsxDEV(ErrorOutlineOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"div\",\n            noWrap: false,\n            paragraph: true,\n            className: classes.error,\n            variant: \"body1\",\n            children: nextOperations.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this)\n  /* <Container >\n      <Grid container spacing={2} direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <Grid item xs={12} md={6} container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Paper className={classes.root}  elevation={8}>\n              \n              <Typography align=\"center\" component=\"h1\" variant=\"h5\">\n              <LockOutlinedIcon  /><br/>\n                  Step 2\n              </Typography>\n              \n               <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n               <LocalizationProvider dateAdapter={AdapterDateFns}>\n                   <DatePicker\n                      label=\"Birthday date\"\n                      value={birthday}\n                      onChange={(newValue) => {\n                          setBirthday(newValue);\n                      if(newValue !== null){\n                          const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                          dispatch(updateForm({dateBirth: newFormatDate}));\n                          }\n                      }}\n                      renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n                  />\n              </LocalizationProvider> */\n  // {/* <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br /> */}\n  // {/* <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/> */}\n  //         {nextOperations.error &&\n  //             <Paper elevation={3} className={classes.errorCard}>\n  //                 <Grid\n  //                     container\n  //                     direction=\"column\"\n  //                     justifyContent=\"center\"\n  //                     alignItems=\"center\"\n  //                 >\n  //                     <Grid item>\n  //                         <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                             <ErrorOutlineOutlinedIcon />\n  //                         </Typography>\n  //                     </Grid>\n  //                     <Grid item>\n  //                         <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                             {nextOperations.error}\n  //                         </Typography>\n  //                     </Grid>\n  //                 </Grid>\n  //             </Paper>\n  //         }\n  //         </Paper>        \n  //       </Grid>\n  //     </Grid>\n  //   </Container>\n  //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //     >\n  //     <Paper className={classes.root}  elevation={8} >\n  //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //     >\n  //             <LockOutlinedIcon />\n  //         <Typography component=\"h1\" variant=\"h5\">\n  //          Step 2\n  //         </Typography>\n  //         <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n  //         <LocalizationProvider dateAdapter={AdapterDateFns}>\n  //             <DatePicker\n  //                 label=\"Basic example\"\n  //                 value={birthday}\n  //                 onChange={(newValue) => {\n  //                     setBirthday(newValue);\n  //                 if(newValue !== null){\n  //                     const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n  //                     dispatch(updateForm({dateBirth: newFormatDate}));\n  //                     }\n  //                 }}\n  //                 renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n  //             />\n  //         </LocalizationProvider>\n  //     </Grid>\n  //     {nextOperations.error &&\n  //         <Paper elevation={3} className={classes.errorCard}>\n  //             <Grid\n  //                 container\n  //                 direction=\"column\"\n  //                 justifyContent=\"center\"\n  //                 alignItems=\"center\"\n  //             >\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         <ErrorOutlineOutlinedIcon />\n  //                     </Typography>\n  //                 </Grid>\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         {nextOperations.error}\n  //                     </Typography>\n  //                 </Grid>\n  //             </Grid>\n  //         </Paper>\n  //     }\n  // </Paper>\n  // </Grid>\n  ;\n};\n\n_s(Step2, \"hZUCx23DzmgeKAfLWJxnxCw9cMY=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Step2;\nexport default Step2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js"],"names":["React","useState","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","AdapterDateFns","LocalizationProvider","DatePicker","Box","Paper","Grid","Typography","useStyles","theme","root","padding","marginTop","error","maxWidth","color","errorCard","textField","width","birthday","Step2","classes","dispatch","nextOperations","state","formData","operations","update","setBirthday","emailChangeHandler","e","isEmail","target","value","trim","setOperations","function","status","email","flexGrow","px","paperStyle","my","mx","p","textAlign","newValue","newFormatDate","getUTCMonth","getUTCDate","getUTCFullYear","dateBirth","params"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,0BAAtC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;;;AACA,MAAMC,SAAS,GAAGd,UAAU,CAAEe,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,OAAO,EAAE,EADP;AAEFC,IAAAA,SAAS,EAAE;AAFT,GAD+B;AAMrCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE,GADP;AAEHC,IAAAA,KAAK,EAAE;AAFJ,GAN8B;AAUrCC,EAAAA,SAAS,EAAE;AACPL,IAAAA,OAAO,EAAE,EADF;AAEPC,IAAAA,SAAS,EAAE;AAFJ,GAV0B;AAcrCK,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,GADA;AAEPN,IAAAA,SAAS,EAAE;AAFJ,GAd0B;AAkBrCO,EAAAA,QAAQ,EAAE;AACN;AACAP,IAAAA,SAAS,EAAE;AAFL;AAlB2B,CAAZ,CAAD,CAA5B;;AAyBA,MAAMQ,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,QAAMc,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM0B,cAAc,GAAGzB,WAAW,CAAE0B,KAAD,IAAUA,KAAK,CAACC,QAAN,CAAeC,UAAf,CAA0BC,MAArC,CAAlC;AACA,QAAMF,QAAQ,GAAG3B,WAAW,CAAE0B,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeA,QAA3B,CAA5B;AACA,QAAM,CAACN,QAAD,EAAWS,WAAX,IAA0BrC,QAAQ,CAAC,EAAD,CAAxC,CALgB,CAQhB;;AACA,QAAMsC,kBAAkB,GAAIC,CAAD,IAAO;AAC9B;AACA,QAAGnC,SAAS,CAACoC,OAAV,CAAkBD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,IAAf,EAAlB,CAAH,EAA4C;AACxCZ,MAAAA,QAAQ,CAACtB,WAAW,CAACmC,aAAZ,CAA0B;AAC/BC,QAAAA,QAAQ,EAAE,QADqB;AAE/BC,QAAAA,MAAM,EAAE,SAFuB;AAG/BxB,QAAAA,KAAK,EAAE;AAHwB,OAA1B,CAAD,CAAR,CADwC,CAMxC;;AACAS,MAAAA,QAAQ,CAACvB,UAAU,CAAC;AAACuC,QAAAA,KAAK,EAAER,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,IAAf;AAAR,OAAD,CAAX,CAAR;AACH,KARD,MAQK;AACD;AACAZ,MAAAA,QAAQ,CAACtB,WAAW,CAACmC,aAAZ,CAA0B;AAC/BC,QAAAA,QAAQ,EAAE,QADqB;AAE/BC,QAAAA,MAAM,EAAE,QAFuB;AAG/BxB,QAAAA,KAAK,EAAE;AAHwB,OAA1B,CAAD,CAAR;AAKH;AACJ,GAlBD;;AAsBA,sBAGI,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAE0B,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,EAAE,EAAE;AAAnB,KAAT;AAAA,4BACA,QAAC,KAAD;AACI,MAAA,EAAE,EAAC,YADP;AAEI,MAAA,SAAS,EAAEnB,OAAO,CAACoB,UAFvB;AAGI,MAAA,EAAE,EAAE;AAAE3B,QAAAA,QAAQ,EAAE,GAAZ;AAAiB4B,QAAAA,EAAE,EAAE,CAArB;AAAwBC,QAAAA,EAAE,EAAE,MAA5B;AAAoCC,QAAAA,CAAC,EAAE;AAAvC,OAHR;AAAA,6BAKI,QAAC,IAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,SAAS,EAAC,QAFd;AAGI,QAAA,cAAc,EAAC,QAHnB;AAII,QAAA,UAAU,EAAC,QAJf;AAKI,QAAA,IAAI,EAAC,MALT;AAMI,QAAA,OAAO,EAAE,CANb;AAAA,+BAQI,QAAC,IAAD;AAAO,UAAA,IAAI,MAAX;AAAY,UAAA,EAAE,MAAd;AAAA,kCACI,QAAC,UAAD;AACI,YAAA,KAAK,EAAE;AAAEC,cAAAA,SAAS,EAAE;AAAb,aADX;AAEI,YAAA,SAAS,EAAC,KAFd;AAGI,YAAA,OAAO,EAAC,IAHZ;AAAA,oCAKI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,oBALJ,oBAKyB;AAAA;AAAA;AAAA;AAAA,oBALzB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAWI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAExB,OAAO,CAACJ,SAA9B;AAAyC,YAAA,KAAK,EAAC,OAA/C;AAAuD,YAAA,YAAY,EAAEQ,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEa,KAA/E;AAAsF,YAAA,OAAO,EAAC,UAA9F;AAA0G,YAAA,IAAI,EAAC,MAA/G;AAAsH,YAAA,IAAI,EAAC,OAA3H;AAAmI,YAAA,QAAQ,EAAET;AAA7I;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAWkL;AAAA;AAAA;AAAA;AAAA,kBAXlL,eAYH,QAAC,oBAAD;AAAsB,YAAA,WAAW,EAAE5B,cAAnC;AAAA,mCACI,QAAC,UAAD;AACG,cAAA,KAAK,EAAC,eADT;AAEG,cAAA,KAAK,EAAEkB,QAFV;AAGG,cAAA,QAAQ,EAAG2B,QAAD,IAAc;AACpBlB,gBAAAA,WAAW,CAACkB,QAAD,CAAX;;AACJ,oBAAGA,QAAQ,KAAK,IAAhB,EAAqB;AACjB,wBAAMC,aAAa,GAAGD,QAAQ,CAACE,WAAT,KAAwB,CAAxB,GAA4B,GAA5B,GAAkCF,QAAQ,CAACG,UAAT,EAAlC,GAA0D,GAA1D,GAAgEH,QAAQ,CAACI,cAAT,EAAtF;AACA5B,kBAAAA,QAAQ,CAACvB,UAAU,CAAC;AAACoD,oBAAAA,SAAS,EAAEJ;AAAZ,mBAAD,CAAX,CAAR;AACC;AACJ,eATJ;AAUG,cAAA,WAAW,EAAGK,MAAD,iBAAY,QAAC,SAAD;AAAW,gBAAA,SAAS,EAAE/B,OAAO,CAACF,QAA9B;AAAwC,gBAAA,OAAO,EAAC,UAAhD;AAAA,mBAA+DiC;AAA/D;AAAA;AAAA;AAAA;AAAA;AAV5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAZG;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,YADA,EA8CC7B,cAAc,CAACV,KAAf,iBACG,QAAC,KAAD;AACI,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE,GAAZ;AAAiB4B,QAAAA,EAAE,EAAE,CAArB;AAAwBC,QAAAA,EAAE,EAAE,MAA5B;AAAoCC,QAAAA,CAAC,EAAE;AAAvC,OADR;AAEI,MAAA,SAAS,EAAEvB,OAAO,CAACL,SAFvB;AAAA,6BAII,QAAC,IAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,SAAS,EAAC,QAFd;AAGI,QAAA,cAAc,EAAC,QAHnB;AAII,QAAA,UAAU,EAAC,QAJf;AAAA,gCAMI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACI,QAAC,UAAD;AACI,YAAA,SAAS,EAAC,KADd;AAEI,YAAA,SAAS,EAAE,IAFf;AAGI,YAAA,SAAS,EAAEK,OAAO,CAACR,KAHvB;AAII,YAAA,OAAO,EAAC,OAJZ;AAAA,mCAMI,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ,eAgBI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACI,QAAC,UAAD;AACI,YAAA,SAAS,EAAC,KADd;AAEI,YAAA,MAAM,EAAE,KAFZ;AAGI,YAAA,SAAS,EAAE,IAHf;AAII,YAAA,SAAS,EAAEQ,OAAO,CAACR,KAJvB;AAKI,YAAA,OAAO,EAAC,OALZ;AAAA,sBAOKU,cAAc,CAACV;AAPpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YA/CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAqpNA;AAsNH,CArPD;;GAAMO,K;UACcZ,S,EACCX,W,EACMC,W,EACNA,W;;;KAJfsB,K;AAuPN,eAAeA,KAAf","sourcesContent":["import React, {useState} from 'react';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 20,\n        marginTop: 30,\n\n    },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        padding: 15,\n        marginTop: 20\n    },\n    textField: {\n        width: 300,\n        marginTop: 20\n    },\n    birthday: {\n        // width: 300,\n        marginTop: 20\n    }\n}));\n\n\nconst Step2 = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n    const [birthday, setBirthday] = useState(\"\");\n\n\n    // Handler function for email input\n    const emailChangeHandler = (e) => {\n        // Validate and trim and change the operations\n        if(validator.isEmail(e.target.value.trim())){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n                error: \"\"\n            }));\n            // Pass the data to the store\n            dispatch(updateForm({email: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Failed\",\n                error: \"Invalid email\"\n            }))\n        }\n    }\n\n\n\n    return(\n\n\n        <Box sx={{ flexGrow: 1, px: 3 }}>\n        <Paper\n            id=\"paperStyle\"\n            className={classes.paperStyle}\n            sx={{ maxWidth: 500, my: 1, mx: \"auto\", p: 2 }}\n        >\n            <Grid\n                container\n                direction=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                wrap=\"wrap\"\n                spacing={2}\n            >\n                <Grid  item xs>\n                    <Typography\n                        style={{ textAlign: \"center\" }}\n                        component=\"div\"\n                        variant=\"h5\"\n                    >\n                        <LockOutlinedIcon /> <br />\n                        Step 1\n                    </Typography>\n\n                \n                    <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n             <LocalizationProvider dateAdapter={AdapterDateFns}>\n                 <DatePicker\n                    label=\"Birthday date\"\n                    value={birthday}\n                    onChange={(newValue) => {\n                        setBirthday(newValue);\n                    if(newValue !== null){\n                        const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                        dispatch(updateForm({dateBirth: newFormatDate}));\n                        }\n                    }}\n                    renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n                />\n            </LocalizationProvider> \n\n\n                </Grid>\n            </Grid>\n        </Paper>\n\n        {nextOperations.error && (\n            <Paper\n                sx={{ maxWidth: 500, my: 1, mx: \"auto\", p: 2 }}\n                className={classes.errorCard}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <Typography\n                            component=\"div\"\n                            paragraph={true}\n                            className={classes.error}\n                            variant=\"body1\"\n                        >\n                            <ErrorOutlineOutlinedIcon />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography\n                            component=\"div\"\n                            noWrap={false}\n                            paragraph={true}\n                            className={classes.error}\n                            variant=\"body1\"\n                        >\n                            {nextOperations.error}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Paper>\n        )}\n    </Box>\n\n\n\n/* <Container >\n    <Grid container spacing={2} direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <Grid item xs={12} md={6} container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <Paper className={classes.root}  elevation={8}>\n            \n            <Typography align=\"center\" component=\"h1\" variant=\"h5\">\n            <LockOutlinedIcon  /><br/>\n                Step 2\n            </Typography>\n            \n             <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n             <LocalizationProvider dateAdapter={AdapterDateFns}>\n                 <DatePicker\n                    label=\"Birthday date\"\n                    value={birthday}\n                    onChange={(newValue) => {\n                        setBirthday(newValue);\n                    if(newValue !== null){\n                        const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                        dispatch(updateForm({dateBirth: newFormatDate}));\n                        }\n                    }}\n                    renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n                />\n            </LocalizationProvider> */\n\n\n\n        \n            // {/* <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br /> */}\n            // {/* <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/> */}\n\n\n//         {nextOperations.error &&\n//             <Paper elevation={3} className={classes.errorCard}>\n//                 <Grid\n//                     container\n//                     direction=\"column\"\n//                     justifyContent=\"center\"\n//                     alignItems=\"center\"\n//                 >\n\n//                     <Grid item>\n//                         <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n//                             <ErrorOutlineOutlinedIcon />\n//                         </Typography>\n//                     </Grid>\n//                     <Grid item>\n//                         <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n//                             {nextOperations.error}\n//                         </Typography>\n//                     </Grid>\n\n//                 </Grid>\n//             </Paper>\n//         }\n\n//         </Paper>        \n//       </Grid>\n//     </Grid>\n//   </Container>\n\n\n\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //     >\n    //     <Paper className={classes.root}  elevation={8} >\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //     >\n    //             <LockOutlinedIcon />\n            \n    //         <Typography component=\"h1\" variant=\"h5\">\n    //          Step 2\n    //         </Typography>\n      \n    //         <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n    //         <LocalizationProvider dateAdapter={AdapterDateFns}>\n    //             <DatePicker\n    //                 label=\"Basic example\"\n    //                 value={birthday}\n    //                 onChange={(newValue) => {\n    //                     setBirthday(newValue);\n    //                 if(newValue !== null){\n    //                     const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n    //                     dispatch(updateForm({dateBirth: newFormatDate}));\n    //                     }\n    //                 }}\n    //                 renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n    //             />\n    //         </LocalizationProvider>\n    //     </Grid>\n\n    //     {nextOperations.error &&\n    //         <Paper elevation={3} className={classes.errorCard}>\n    //             <Grid\n    //                 container\n    //                 direction=\"column\"\n    //                 justifyContent=\"center\"\n    //                 alignItems=\"center\"\n    //             >\n\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         <ErrorOutlineOutlinedIcon />\n    //                     </Typography>\n    //                 </Grid>\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         {nextOperations.error}\n    //                     </Typography>\n    //                 </Grid>\n\n    //             </Grid>\n    //         </Paper>\n    //     }\n    // </Paper>\n    // </Grid>\n    );\n}\n\nexport default Step2;"]},"metadata":{},"sourceType":"module"}