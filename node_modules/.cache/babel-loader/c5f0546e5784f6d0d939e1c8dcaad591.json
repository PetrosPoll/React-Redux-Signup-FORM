{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker'; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: 50,\n    paddingRight: 50,\n    padding: 20,\n    marginTop: 30,\n    paddingBottom: 40\n  },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    paddingTop: 15,\n    marginTop: 20\n  },\n  textField: {\n    // width: 300,\n    marginTop: 20\n  },\n  birthday: {\n    // width: 300,\n    marginTop: 20\n  }\n}));\n\nconst Step2 = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  const [birthday, setBirthday] = useState(\"\"); // Handler function for email input\n\n  const emailChangeHandler = e => {\n    // Validate and trim and change the operations\n    if (validator.isEmail(e.target.value.trim())) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\",\n        error: \"\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        email: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Failed\",\n        error: \"Invalid email\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.root,\n          elevation: 8,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            component: \"h1\",\n            variant: \"h5\",\n            children: [/*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 34\n            }, this), \"Step 2\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.textField,\n            label: \"email\",\n            defaultValue: formData === null || formData === void 0 ? void 0 : formData.email,\n            variant: \"outlined\",\n            type: \"text\",\n            name: \"Email\",\n            onChange: emailChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 188\n          }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              label: \"Birthday date\",\n              value: birthday,\n              onChange: newValue => {\n                setBirthday(newValue);\n\n                if (newValue !== null) {\n                  const newFormatDate = newValue.getUTCMonth() + 1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                  dispatch(updateForm({\n                    dateBirth: newFormatDate\n                  }));\n                }\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.birthday,\n                variant: \"outlined\",\n                ...params\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 14\n          }, this), nextOperations.error && /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            className: classes.errorCard,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"div\",\n                  noWrap: false,\n                  paragraph: true,\n                  className: classes.error,\n                  variant: \"body1\",\n                  children: /*#__PURE__*/_jsxDEV(ErrorOutlineOutlinedIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  component: \"div\",\n                  noWrap: false,\n                  paragraph: true,\n                  className: classes.error,\n                  variant: \"body1\",\n                  children: nextOperations.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 1\n  }, this) //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //     >\n  //     <Paper className={classes.root}  elevation={8} >\n  //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //     >\n  //             <LockOutlinedIcon />\n  //         <Typography component=\"h1\" variant=\"h5\">\n  //          Step 2\n  //         </Typography>\n  //         <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n  //         <LocalizationProvider dateAdapter={AdapterDateFns}>\n  //             <DatePicker\n  //                 label=\"Basic example\"\n  //                 value={birthday}\n  //                 onChange={(newValue) => {\n  //                     setBirthday(newValue);\n  //                 if(newValue !== null){\n  //                     const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n  //                     dispatch(updateForm({dateBirth: newFormatDate}));\n  //                     }\n  //                 }}\n  //                 renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n  //             />\n  //         </LocalizationProvider>\n  //     </Grid>\n  //     {nextOperations.error &&\n  //         <Paper elevation={3} className={classes.errorCard}>\n  //             <Grid\n  //                 container\n  //                 direction=\"column\"\n  //                 justifyContent=\"center\"\n  //                 alignItems=\"center\"\n  //             >\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         <ErrorOutlineOutlinedIcon />\n  //                     </Typography>\n  //                 </Grid>\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         {nextOperations.error}\n  //                     </Typography>\n  //                 </Grid>\n  //             </Grid>\n  //         </Paper>\n  //     }\n  // </Paper>\n  // </Grid>\n  ;\n};\n\n_s(Step2, \"hZUCx23DzmgeKAfLWJxnxCw9cMY=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Step2;\nexport default Step2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js"],"names":["React","useState","Typography","Grid","Container","Paper","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","AdapterDateFns","LocalizationProvider","DatePicker","useStyles","theme","root","paddingLeft","paddingRight","padding","marginTop","paddingBottom","error","maxWidth","color","errorCard","paddingTop","textField","birthday","Step2","classes","dispatch","nextOperations","state","formData","operations","update","setBirthday","emailChangeHandler","e","isEmail","target","value","trim","setOperations","function","status","email","newValue","newFormatDate","getUTCMonth","getUTCDate","getUTCFullYear","dateBirth","params"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: 50,\n        paddingRight: 50,\n        padding: 20,\n        marginTop: 30,\n        paddingBottom: 40\n\n    },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        paddingTop: 15,\n        marginTop: 20\n    },\n    textField: {\n        // width: 300,\n        marginTop: 20\n    },\n    birthday: {\n        // width: 300,\n        marginTop: 20\n    }\n}));\n\n\nconst Step2 = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n    const [birthday, setBirthday] = useState(\"\");\n\n\n    // Handler function for email input\n    const emailChangeHandler = (e) => {\n        // Validate and trim and change the operations\n        if(validator.isEmail(e.target.value.trim())){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n                error: \"\"\n            }));\n            // Pass the data to the store\n            dispatch(updateForm({email: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Failed\",\n                error: \"Invalid email\"\n            }))\n        }\n    }\n\n\n\n    return(\n\n<Container alignItems=\"center\" >\n    <Grid container spacing={2}>\n      <Grid item xs={12} md={6} container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <Paper className={classes.root}  elevation={8}>\n            \n            <Typography align=\"center\" component=\"h1\" variant=\"h5\">\n            <LockOutlinedIcon  /><br/>\n                Step 2\n            </Typography>\n            \n             <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n             <LocalizationProvider dateAdapter={AdapterDateFns}>\n                 <DatePicker\n                    label=\"Birthday date\"\n                    value={birthday}\n                    onChange={(newValue) => {\n                        setBirthday(newValue);\n                    if(newValue !== null){\n                        const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                        dispatch(updateForm({dateBirth: newFormatDate}));\n                        }\n                    }}\n                    renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n                />\n            </LocalizationProvider>\n\n\n\n        \n            {/* <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br /> */}\n            {/* <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/> */}\n\n\n        {nextOperations.error &&\n            <Paper elevation={3} className={classes.errorCard}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            <ErrorOutlineOutlinedIcon />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            {nextOperations.error}\n                        </Typography>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        }\n\n        </Paper>        \n      </Grid>\n    </Grid>\n  </Container>\n\n\n\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //     >\n    //     <Paper className={classes.root}  elevation={8} >\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //     >\n    //             <LockOutlinedIcon />\n            \n    //         <Typography component=\"h1\" variant=\"h5\">\n    //          Step 2\n    //         </Typography>\n      \n    //         <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n    //         <LocalizationProvider dateAdapter={AdapterDateFns}>\n    //             <DatePicker\n    //                 label=\"Basic example\"\n    //                 value={birthday}\n    //                 onChange={(newValue) => {\n    //                     setBirthday(newValue);\n    //                 if(newValue !== null){\n    //                     const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n    //                     dispatch(updateForm({dateBirth: newFormatDate}));\n    //                     }\n    //                 }}\n    //                 renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n    //             />\n    //         </LocalizationProvider>\n    //     </Grid>\n\n    //     {nextOperations.error &&\n    //         <Paper elevation={3} className={classes.errorCard}>\n    //             <Grid\n    //                 container\n    //                 direction=\"column\"\n    //                 justifyContent=\"center\"\n    //                 alignItems=\"center\"\n    //             >\n\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         <ErrorOutlineOutlinedIcon />\n    //                     </Typography>\n    //                 </Grid>\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         {nextOperations.error}\n    //                     </Typography>\n    //                 </Grid>\n\n    //             </Grid>\n    //         </Paper>\n    //     }\n    // </Paper>\n    // </Grid>\n    );\n}\n\nexport default Step2;"]},"metadata":{},"sourceType":"module"}