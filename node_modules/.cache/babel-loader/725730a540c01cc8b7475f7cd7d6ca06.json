{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css'; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 20,\n    marginTop: 30\n  },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    paddingTop: 15,\n    marginTop: 20\n  },\n  textField: {\n    // width: 300,\n    marginTop: 20,\n    marginBottom: 20\n  }\n}));\n\nconst Step1 = () => {\n  _s();\n\n  const classes = useStyles();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  useEffect(() => {\n    // Set phone number to input when you come back from another step\n    setPhoneNumber(formData.phoneNumber);\n  }, [formData.phoneNumber]); // Handler function for name input\n\n  const nameChangeHandler = e => {\n    if (validator.isLength(e.target.value.trim(), {\n      min: 3,\n      max: 10\n    })) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        name: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Pending\",\n        error: \"Name must be between 3 and 10 characters!\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.root,\n          elevation: 8,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.textField,\n            label: \"name\",\n            defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,\n            variant: \"outlined\",\n            type: \"text\",\n            name: \"Name\",\n            onChange: nameChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 183\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.textField,\n            label: \"name\",\n            defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,\n            variant: \"outlined\",\n            type: \"text\",\n            name: \"Name\",\n            onChange: nameChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 183\n          }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n            placeholder: \"Enter phone number\",\n            value: phoneNumber,\n            onChange: phone => {\n              dispatch(updateForm({\n                phoneNumber: phone\n              }));\n            },\n            country: 'gr'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this) //     <Container>\n  //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //         spacing={2}\n  //     >\n  //     <Paper className={classes.root}  elevation={8} >\n  //     <Grid\n  //         container\n  //         direction=\"column\"\n  //         justifyContent=\"center\"\n  //         alignItems=\"center\"\n  //     >\n  //             <LockOutlinedIcon />\n  //         <Typography component=\"h1\" variant=\"h5\">\n  //          Step 1\n  //         </Typography>\n  //         <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n  //         <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/>\n  //     </Grid>\n  //     {nextOperations.error &&\n  //         <Paper elevation={3} className={classes.errorCard}>\n  //             <Grid\n  //                 container\n  //                 direction=\"column\"\n  //                 justifyContent=\"center\"\n  //                 alignItems=\"center\"\n  //             >\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         <ErrorOutlineOutlinedIcon />\n  //                     </Typography>\n  //                 </Grid>\n  //                 <Grid item>\n  //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n  //                         {nextOperations.error}\n  //                     </Typography>\n  //                 </Grid>\n  //             </Grid>\n  //         </Paper>\n  //     }\n  // </Paper>\n  // </Grid>\n  // </Container>\n  ;\n};\n\n_s(Step1, \"y/3VV06Fb18NP76w8mEuQKqhjY4=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Step1;\nexport default Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js"],"names":["React","useState","useEffect","Typography","Grid","Container","Paper","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","PhoneInput","useStyles","theme","root","padding","marginTop","error","maxWidth","color","errorCard","paddingTop","textField","marginBottom","Step1","classes","phoneNumber","setPhoneNumber","dispatch","nextOperations","state","formData","operations","update","nameChangeHandler","e","isLength","target","value","trim","min","max","setOperations","function","status","name","phone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css';\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 20,\n        marginTop: 30,\n    },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        paddingTop: 15,\n        marginTop: 20\n    },\n    textField: {\n        // width: 300,\n        marginTop: 20,\n        marginBottom: 20\n    },\n}));\n\n\nconst Step1 = () => {\n    const classes = useStyles();\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n\n\n    useEffect(() => {\n        // Set phone number to input when you come back from another step\n        setPhoneNumber(formData.phoneNumber);\n    }, [formData.phoneNumber])\n\n\n    // Handler function for name input\n    const nameChangeHandler = (e) => {\n        if(validator.isLength(e.target.value.trim(), {min: 3, max: 10}) ){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n            }))\n            \n            // Pass the data to the store\n            dispatch(updateForm({name: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Pending\",\n                error: \"Name must be between 3 and 10 characters!\"\n            }));\n        }\n    }\n\n\n\n\n    return(\n    <Container >\n    <Grid container spacing={2}>\n      <Grid item xs={12} md={6} container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        <Paper className={classes.root}  elevation={8}>\n\n            <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n            <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n            <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/>\n    \n        </Paper>        \n      </Grid>\n    </Grid>\n  </Container>\n    //     <Container>\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //         spacing={2}\n    //     >\n    //     <Paper className={classes.root}  elevation={8} >\n    //     <Grid\n    //         container\n    //         direction=\"column\"\n    //         justifyContent=\"center\"\n    //         alignItems=\"center\"\n    //     >\n    //             <LockOutlinedIcon />\n            \n    //         <Typography component=\"h1\" variant=\"h5\">\n    //          Step 1\n    //         </Typography>\n        \n    //         <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n    //         <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/>\n            \n    //     </Grid>\n\n    //     {nextOperations.error &&\n    //         <Paper elevation={3} className={classes.errorCard}>\n    //             <Grid\n    //                 container\n    //                 direction=\"column\"\n    //                 justifyContent=\"center\"\n    //                 alignItems=\"center\"\n    //             >\n\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         <ErrorOutlineOutlinedIcon />\n    //                     </Typography>\n    //                 </Grid>\n    //                 <Grid item>\n    //                     <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n    //                         {nextOperations.error}\n    //                     </Typography>\n    //                 </Grid>\n\n    //             </Grid>\n    //         </Paper>\n    //     }\n    // </Paper>\n    // </Grid>\n    // </Container>\n    );\n}\n\nexport default Step1;"]},"metadata":{},"sourceType":"module"}