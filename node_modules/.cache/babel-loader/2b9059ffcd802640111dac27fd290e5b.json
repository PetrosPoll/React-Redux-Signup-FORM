{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/signup_process.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport StepProgressBar from 'react-step-progress';\nimport 'react-step-progress/dist/index.css';\nimport '../index.css';\nimport '../App.css';\nimport Step1 from './step1';\nimport Step2 from './step2';\nimport Step3 from './step3';\nimport Step4 from './step4';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formActions } from \"../store/form-data-slice\";\nimport validator from 'validator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const onSubmit = () => {\n    alert('submit data');\n  };\n\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.updateStep);\n  const formData = useSelector(state => state.formData.formData);\n  const [nextStep, setNextStep] = useState(false);\n  const curNextStep = useRef(nextStep);\n  curNextStep.current = nextStep;\n  useEffect(() => {\n    console.log(\"Useffect signup.js\"); // If the operations has change that means the user passed the validator\n\n    if (nextOperations.status === \"Success\") {\n      console.log(\"Operations next change to Success\");\n      setNextStep(true);\n    } else if (nextOperations.status === \"Pending\") {\n      console.log(\"Operations next change to Pending\");\n      setNextStep(false);\n    } else if (nextOperations.status === \"Failed\") {\n      console.log(\"Operations next change to Failed\");\n      setNextStep(false);\n    } //   // Initialize again the operations to false for the next validator\n    //   dispatch(formActions.setOperations({\n    //     function: 'updateStep',\n    //     status: \"false\",\n    //     error: \"\"\n    // }));\n    // Whenever dispatch called, and variables nextStep and status of iperations has change the component re-render\n\n  }, [nextStep, nextOperations.status, dispatch]);\n\n  const validate1 = () => {\n    console.log(nextOperations.status);\n\n    if (curNextStep.current) {\n      return true;\n    } else {\n      console.log(\"Set operations with error \");\n      console.log(nextOperations.status);\n      console.log(nextOperations.status === \"Failed\" && nextOperations.error.length === 0);\n\n      if (nextOperations.status === \"Failed\" && nextOperations.error === \"\") {\n        dispatch(formActions.setOperations({\n          function: 'updateStep',\n          status: \"Failed\",\n          error: \"Please fill in the fields\"\n        }));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(StepProgressBar, {\n      startingStep: 0,\n      wrapperClass: \"progress-wrapper-custom\",\n      onSubmit: onSubmit,\n      submitBtnName: \"Submit\",\n      previousBtnName: \"Back\",\n      nextBtnName: \"Next\",\n      steps: [{\n        label: 'Step 1',\n        name: 'step 1',\n        content: /*#__PURE__*/_jsxDEV(Step1, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 22\n        }, this),\n        validator: validate1\n      }, {\n        label: 'Step 2',\n        name: 'step 2',\n        content: /*#__PURE__*/_jsxDEV(Step2, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this),\n        validator: () => curNextStep.current\n      }, {\n        label: 'Step 3',\n        name: 'step 3',\n        content: /*#__PURE__*/_jsxDEV(Step3, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 22\n        }, this),\n        validator: () => curNextStep.current\n      }, {\n        label: 'Step 4',\n        name: 'step 4',\n        content: /*#__PURE__*/_jsxDEV(Step4, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 22\n        }, this)\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f9JijIeLCBv4nJnU0rIWJ1sV56I=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/signup_process.js"],"names":["React","useState","useEffect","useRef","StepProgressBar","Step1","Step2","Step3","Step4","useDispatch","useSelector","formActions","validator","App","onSubmit","alert","dispatch","nextOperations","state","formData","operations","updateStep","nextStep","setNextStep","curNextStep","current","console","log","status","validate1","error","length","setOperations","function","label","name","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport StepProgressBar from 'react-step-progress';\nimport 'react-step-progress/dist/index.css';\nimport '../index.css';\nimport '../App.css';\nimport Step1 from './step1';\nimport Step2 from './step2';\nimport Step3 from './step3';\nimport Step4 from './step4';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { formActions} from \"../store/form-data-slice\";\nimport validator from 'validator';\n\n\n\nfunction App() {\n  const onSubmit = () => {\n    alert('submit data');\n  };\n  const dispatch = useDispatch();\n  const nextOperations = useSelector((state) =>state.formData.operations.updateStep);\n  const formData = useSelector((state) =>state.formData.formData);\n  const [nextStep, setNextStep] = useState(false);\n  const curNextStep = useRef(nextStep);\n  curNextStep.current = nextStep;\n\n \n\n  useEffect(() => {\n    console.log(\"Useffect signup.js\");\n    // If the operations has change that means the user passed the validator\n    if(nextOperations.status === \"Success\"){\n      console.log(\"Operations next change to Success\")\n      setNextStep(true);\n    }else if ( nextOperations.status === \"Pending\"){\n      console.log(\"Operations next change to Pending\")\n      setNextStep(false);\n    }else if (nextOperations.status === \"Failed\"){\n      console.log(\"Operations next change to Failed\")\n      setNextStep(false);\n    }\n  //   // Initialize again the operations to false for the next validator\n  //   dispatch(formActions.setOperations({\n  //     function: 'updateStep',\n  //     status: \"false\",\n  //     error: \"\"\n  // }));\n// Whenever dispatch called, and variables nextStep and status of iperations has change the component re-render\n}, [ nextStep,nextOperations.status, dispatch])\n\n\nconst validate1 = () => {\n  console.log(nextOperations.status);\n  if(curNextStep.current){\n    return true;\n  }else{\n    console.log(\"Set operations with error \");\n    console.log(nextOperations.status);\n    console.log(nextOperations.status === \"Failed\" && nextOperations.error.length === 0);\n    \n    if(nextOperations.status === \"Failed\" && nextOperations.error === \"\"){\n    dispatch(formActions.setOperations({\n      function: 'updateStep',\n      status: \"Failed\",\n      error: \"Please fill in the fields\"\n  }));\n}\n \n  }\n}\n  \n\n  return (\n    <div className=\"app\">\n      <StepProgressBar\n        startingStep={0}\n        wrapperClass=\"progress-wrapper-custom\"\n        onSubmit={onSubmit}\n        submitBtnName=\"Submit\"\n        previousBtnName=\"Back\"\n        nextBtnName=\"Next\"\n        steps={[\n          {\n            label: 'Step 1',\n            name: 'step 1',\n            content: <Step1/>,\n            validator: validate1,\n          },\n          {\n            label: 'Step 2',\n            name: 'step 2',\n            content: <Step2/>,\n            validator: () => curNextStep.current,\n          },\n          {\n            label: 'Step 3',\n            name: 'step 3',\n            content: <Step3/>,\n            validator: () => curNextStep.current,\n          },\n          {\n            label: 'Step 4',\n            name: 'step 4',\n            content: <Step4/>\n          }\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}