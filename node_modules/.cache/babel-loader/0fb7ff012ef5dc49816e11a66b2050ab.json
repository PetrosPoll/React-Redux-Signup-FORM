{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker'; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: 50,\n    paddingRight: 50,\n    padding: 20,\n    marginTop: 30,\n    paddingBottom: 40\n  },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    paddingTop: 15,\n    marginTop: 20\n  },\n  textField: {\n    width: 300,\n    marginTop: 20\n  },\n  birthday: {\n    width: 300,\n    marginTop: 20\n  }\n}));\n\nconst Step2 = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData); // Handler function for email input\n\n  const emailChangeHandler = e => {\n    // Validate and trim and change the operations\n    if (validator.isEmail(e.target.value.trim())) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\",\n        error: \"\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        email: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Failed\",\n        error: \"Invalid email\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.root,\n      elevation: 8,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"\\u0395\\u03AF\\u03C3\\u03BF\\u03B4\\u03BF\\u03C2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.textField,\n          label: \"email\",\n          defaultValue: formData === null || formData === void 0 ? void 0 : formData.email,\n          variant: \"outlined\",\n          type: \"text\",\n          name: \"Email\",\n          onChange: emailChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 187\n        }, this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n          dateAdapter: AdapterDateFns,\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            label: \"Basic example\",\n            value: formData === null || formData === void 0 ? void 0 : formData.dateBirth,\n            onChange: newValue => {\n              if (newValue !== null) {\n                const newFormatDate = newValue.getUTCMonth() + 1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                dispatch(updateForm({\n                  dateBirth: newFormatDate\n                }));\n              }\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n              className: classes.birthday,\n              variant: \"outlined\",\n              ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), nextOperations.error && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        className: classes.errorCard,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              noWrap: false,\n              paragraph: true,\n              className: classes.error,\n              variant: \"body1\",\n              children: /*#__PURE__*/_jsxDEV(ErrorOutlineOutlinedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              noWrap: false,\n              paragraph: true,\n              className: classes.error,\n              variant: \"body1\",\n              children: nextOperations.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Step2, \"py2ASmVBtHrq2TEdiDtUeef2bLs=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Step2;\nexport default Step2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step2.js"],"names":["React","Typography","Grid","Paper","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","AdapterDateFns","LocalizationProvider","DatePicker","useStyles","theme","root","paddingLeft","paddingRight","padding","marginTop","paddingBottom","error","maxWidth","color","errorCard","paddingTop","textField","width","birthday","Step2","classes","dispatch","nextOperations","state","formData","operations","update","emailChangeHandler","e","isEmail","target","value","trim","setOperations","function","status","email","dateBirth","newValue","newFormatDate","getUTCMonth","getUTCDate","getUTCFullYear","params"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: 50,\n        paddingRight: 50,\n        padding: 20,\n        marginTop: 30,\n        paddingBottom: 40\n\n    },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        paddingTop: 15,\n        marginTop: 20\n    },\n    textField: {\n        width: 300,\n        marginTop: 20\n    },\n    birthday: {\n        width: 300,\n        marginTop: 20\n    }\n}));\n\n\nconst Step2 = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n\n\n\n    // Handler function for email input\n    const emailChangeHandler = (e) => {\n        // Validate and trim and change the operations\n        if(validator.isEmail(e.target.value.trim())){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n                error: \"\"\n            }));\n            // Pass the data to the store\n            dispatch(updateForm({email: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Failed\",\n                error: \"Invalid email\"\n            }))\n        }\n    }\n\n\n    return(\n        <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n        >\n        <Paper className={classes.root}  elevation={8} >\n        <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n        >\n                <LockOutlinedIcon />\n            \n            <Typography component=\"h1\" variant=\"h5\">\n             Είσοδος\n            </Typography>\n      \n            <TextField className={classes.textField} label=\"email\" defaultValue={formData?.email} variant=\"outlined\"  type=\"text\" name=\"Email\" onChange={emailChangeHandler} ></TextField><br />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <DatePicker\n                    label=\"Basic example\"\n                    value={formData?.dateBirth}\n                    onChange={(newValue) => {\n                    if(newValue !== null){\n                        const newFormatDate = newValue.getUTCMonth() +1 + \" \" + newValue.getUTCDate() + \" \" + newValue.getUTCFullYear();\n                        dispatch(updateForm({dateBirth: newFormatDate}));\n                        }\n                    }}\n                    renderInput={(params) => <TextField className={classes.birthday} variant=\"outlined\" {...params} />}\n                />\n            </LocalizationProvider>\n        </Grid>\n\n        {nextOperations.error &&\n            <Paper elevation={3} className={classes.errorCard}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            <ErrorOutlineOutlinedIcon />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            {nextOperations.error}\n                        </Typography>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        }\n    </Paper>\n    </Grid>\n    );\n}\n\nexport default Step2;"]},"metadata":{},"sourceType":"module"}