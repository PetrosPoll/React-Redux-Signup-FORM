{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css';\nimport useMediaQuery from '@mui/material/useMediaQuery'; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: 20,\n    marginTop: 30\n  },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    padding: 15,\n    marginTop: 20\n  },\n  textField: {\n    marginTop: 20,\n    marginBottom: 20\n  }\n}));\n\nconst Step1 = () => {\n  _s();\n\n  const classes = useStyles();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  const matches321 = useMediaQuery('(max-width:321px)');\n  useEffect(() => {\n    // Set phone number to input when you come back from another step\n    setPhoneNumber(formData.phoneNumber);\n  }, [formData.phoneNumber]); // Handler function for name input\n\n  const nameChangeHandler = e => {\n    if (validator.isLength(e.target.value.trim(), {\n      min: 3,\n      max: 10\n    })) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        name: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Pending\",\n        error: \"Name must be between 3 and 10 characters!\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 6,\n        margin: 'auto',\n        maxWidth: 500,\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: true,\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            container: true,\n            direction: \"column\",\n            spacing: 2,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: true,\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.textField,\n                label: \"name\",\n                defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,\n                variant: \"outlined\",\n                type: \"text\",\n                name: \"Name\",\n                onChange: nameChangeHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 199\n              }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n                placeholder: \"Enter phone number\",\n                value: phoneNumber,\n                onChange: phone => {\n                  dispatch(updateForm({\n                    phoneNumber: phone\n                  }));\n                },\n                country: 'gr'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Step1, \"V3wUL8rJ9PsL0GwPLV1FwRYh5bI=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useMediaQuery];\n});\n\n_c = Step1;\nexport default Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js"],"names":["React","useState","useEffect","Typography","Grid","Container","Paper","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","PhoneInput","useMediaQuery","useStyles","theme","root","padding","marginTop","error","maxWidth","color","errorCard","textField","marginBottom","Step1","classes","phoneNumber","setPhoneNumber","dispatch","nextOperations","state","formData","operations","update","matches321","nameChangeHandler","e","isLength","target","value","trim","min","max","setOperations","function","status","name","p","margin","flexGrow","phone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography } from '@material-ui/core';\nimport { Grid, Container } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n\n\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 20,\n        marginTop: 30,\n    },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        padding: 15,\n        marginTop: 20\n    },\n    textField: {\n        marginTop: 20,\n        marginBottom: 20\n    },\n}));\n\n\nconst Step1 = () => {\n    const classes = useStyles();\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n    const matches321 = useMediaQuery('(max-width:321px)');\n\n    useEffect(() => {\n        // Set phone number to input when you come back from another step\n        setPhoneNumber(formData.phoneNumber);\n    }, [formData.phoneNumber])\n\n\n    // Handler function for name input\n    const nameChangeHandler = (e) => {\n        if(validator.isLength(e.target.value.trim(), {min: 3, max: 10}) ){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n            }))\n            \n            // Pass the data to the store\n            dispatch(updateForm({name: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Pending\",\n                error: \"Name must be between 3 and 10 characters!\"\n            }));\n        }\n    }\n\n\n\n\n    return(        \n        <>\n\n         {/* <Grid\n            container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n        >\n            <Grid item>\n        <Paper className={classes.root}  elevation={8} > */}\n        \n            \n            {/* <LockOutlinedIcon /> */}\n            \n            {/* <Typography component=\"h1\" variant=\"h5\">\n             Step 1\n            </Typography> */}\n\n        <Paper sx={{ p: 6, margin: 'auto', maxWidth: 500, flexGrow: 1 }}>\n            <Grid container spacing={2}>\n\n                <Grid item xs={12} sm container>\n                    <Grid item xs container direction=\"column\" spacing={2}>\n                        <Grid item xs>\n                            <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n                            <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>    \n        </Paper>\n        {/* {nextOperations.error &&\n            <Paper elevation={3} className={classes.errorCard}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            <ErrorOutlineOutlinedIcon />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            {nextOperations.error}\n                        </Typography>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        } */}\n        \n    {/* </Paper>\n    </Grid>\n    </Grid> */}\n    </>\n    );\n}\n\nexport default Step1;"]},"metadata":{},"sourceType":"module"}