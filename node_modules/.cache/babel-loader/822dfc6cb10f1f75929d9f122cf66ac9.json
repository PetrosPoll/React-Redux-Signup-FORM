{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import { Typography } from '@material-ui/core';\n// import { Paper } from '@material-ui/core';\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Typography from \"@mui/material/Typography\"; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  // root: {\n  //     padding: 20,\n  //     marginTop: 30,\n  // },\n  error: {\n    maxWidth: 150,\n    color: \"red\"\n  },\n  errorCard: {\n    padding: 15,\n    marginTop: 20\n  },\n  textField: {\n    width: 300,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n\nconst Step1 = () => {\n  _s();\n\n  const classes = useStyles();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  const matches321 = useMediaQuery('(max-width:321px)');\n  useEffect(() => {\n    // Set phone number to input when you come back from another step\n    setPhoneNumber(formData.phoneNumber);\n  }, [formData.phoneNumber]); // Handler function for name input\n\n  const nameChangeHandler = e => {\n    if (validator.isLength(e.target.value.trim(), {\n      min: 3,\n      max: 10\n    })) {\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Success\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        name: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error \n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: \"Pending\",\n        error: \"Name must be between 3 and 10 characters!\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        px: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          maxWidth: 500,\n          my: 1,\n          mx: 'auto',\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          wrap: \"wrap\",\n          spacing: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              style: {\n                textAlign: 'center'\n              },\n              component: \"div\",\n              variant: \"h5\",\n              children: [/*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 13\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 34\n              }, this), \"Step 1\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              className: classes.textField,\n              label: \"name\",\n              defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,\n              variant: \"outlined\",\n              type: \"text\",\n              name: \"Name\",\n              onChange: nameChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 175\n            }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n              placeholder: \"Enter phone number\",\n              value: phoneNumber,\n              onChange: phone => {\n                dispatch(updateForm({\n                  phoneNumber: phone\n                }));\n              },\n              country: 'gr'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 3\n        }, this), nextOperations.error && /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          className: classes.errorCard,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"div\",\n                noWrap: false,\n                paragraph: true,\n                className: classes.error,\n                variant: \"body1\",\n                children: /*#__PURE__*/_jsxDEV(ErrorOutlineOutlinedIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                component: \"div\",\n                noWrap: false,\n                paragraph: true,\n                className: classes.error,\n                variant: \"body1\",\n                children: nextOperations.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Step1, \"V3wUL8rJ9PsL0GwPLV1FwRYh5bI=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useMediaQuery];\n});\n\n_c = Step1;\nexport default Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js"],"names":["React","useState","useEffect","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","PhoneInput","useMediaQuery","Box","Paper","Grid","Avatar","Typography","useStyles","theme","error","maxWidth","color","errorCard","padding","marginTop","textField","width","marginBottom","root","flexGrow","paper","spacing","unit","textAlign","palette","text","secondary","Step1","classes","phoneNumber","setPhoneNumber","dispatch","nextOperations","state","formData","operations","update","matches321","nameChangeHandler","e","isLength","target","value","trim","min","max","setOperations","function","status","name","px","my","mx","p","phone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import { Typography } from '@material-ui/core';\n// import { Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport validator from 'validator';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateForm, formActions} from \"../store/form-data-slice\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/material.css';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\n\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Typography from \"@mui/material/Typography\";\n\n\n\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    // root: {\n    //     padding: 20,\n    //     marginTop: 30,\n    // },\n    error: {\n        maxWidth: 150,\n        color: \"red\"\n    },\n    errorCard: {\n        padding: 15,\n        marginTop: 20\n    },\n    textField: {\n        width: 300,\n        marginTop: 20,\n        marginBottom: 20\n    },\n    root: {\n        flexGrow: 1,\n      },\n      paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n      },\n}));\n\n\nconst Step1 = () => {\n    const classes = useStyles();\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const dispatch = useDispatch();\n    const nextOperations = useSelector((state) =>state.formData.operations.update);\n    const formData = useSelector((state) => state.formData.formData);\n    const matches321 = useMediaQuery('(max-width:321px)');\n\n    useEffect(() => {\n        // Set phone number to input when you come back from another step\n        setPhoneNumber(formData.phoneNumber);\n    }, [formData.phoneNumber])\n\n\n    // Handler function for name input\n    const nameChangeHandler = (e) => {\n        if(validator.isLength(e.target.value.trim(), {min: 3, max: 10}) ){\n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Success\",\n            }))\n            \n            // Pass the data to the store\n            dispatch(updateForm({name: e.target.value.trim()}));\n        }else{\n            // Set a new error \n            dispatch(formActions.setOperations({\n                function: 'update',\n                status: \"Pending\",\n                error: \"Name must be between 3 and 10 characters!\"\n            }));\n        }\n    }\n\n\n\n\n    return(        \n        <>\n\n\n\n<Box sx={{ flexGrow: 1, px: 3 }}>\n<Paper sx={{ maxWidth: 500, my: 1, mx: 'auto', p: 2 }}>\n  <Grid container direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\" wrap=\"wrap\" spacing={2}>\n    <Grid item xs>\n\n        \n    \n            <Typography style={{textAlign: 'center'}} component=\"div\" variant=\"h5\">\n            <LockOutlinedIcon /> <br/>\n             Step 1\n            </Typography>\n\n    <TextField className={classes.textField} label=\"name\" defaultValue={formData?.name} variant=\"outlined\"  type=\"text\" name=\"Name\" onChange={nameChangeHandler} ></TextField><br />\n    <PhoneInput  placeholder=\"Enter phone number\"  value={phoneNumber} onChange={ (phone) => { dispatch(updateForm({phoneNumber: phone}))}} country={'gr'}/>\n                           \n    </Grid>\n  </Grid>\n\n\n        {nextOperations.error &&\n            <Paper elevation={3} className={classes.errorCard}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                >\n\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            <ErrorOutlineOutlinedIcon />\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" noWrap={false} paragraph={true} className={classes.error} variant=\"body1\">\n                            {nextOperations.error}\n                        </Typography>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        }\n        </Paper>\n\n</Box>\n    </>\n    );\n}\n\nexport default Step1;"]},"metadata":{},"sourceType":"module"}