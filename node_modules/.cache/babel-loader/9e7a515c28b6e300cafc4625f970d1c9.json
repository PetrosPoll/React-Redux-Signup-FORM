{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; //Form initial State \n\nconst initialFormState = {\n  formData: {\n    name: '',\n    phoneNumber: '',\n    email: '',\n    dateBirth: ''\n  },\n  operations: {\n    update: {\n      status: '',\n      error: ''\n    },\n    updateStep: {\n      next: \"false\"\n    }\n  }\n}; //Form slice initialization \n\nconst formSlice = createSlice({\n  name: 'signupForm',\n  initialState: initialFormState,\n  reducers: {\n    setFormData(state, action) {\n      state.formData = { ...action.payload\n      };\n    },\n\n    setOperations(state, action) {\n      state.operations[action.payload.function] = {\n        status: action.payload.status || '',\n        error: action.payload.error || undefined\n      };\n    }\n\n  }\n});\nexport const formActions = formSlice.actions;\nexport const updateForm = updateFormData => {\n  var x = 1;\n  return dispatch => {\n    // Setting the operations as pending\n    dispatch(formActions.setOperations({\n      status: 'Pending',\n      function: 'update'\n    }));\n\n    if (x === 1) {\n      return console.log(\"You pass the check and now you will make the operations as success\");\n    } // If you don't find any error above you can set operations as Success and set the data.\n\n\n    dispatch(formActions.setOperations({\n      function: 'update',\n      status: 'Success'\n    }));\n    dispatch(formActions.setFormData(updateFormData));\n  };\n};\nexport default formSlice.reducer;","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/store/form-data-slice.js"],"names":["createSlice","initialFormState","formData","name","phoneNumber","email","dateBirth","operations","update","status","error","updateStep","next","formSlice","initialState","reducers","setFormData","state","action","payload","setOperations","function","undefined","formActions","actions","updateForm","updateFormData","x","dispatch","console","log","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,WAAW,EAAE,EAFR;AAGLC,IAAAA,KAAK,EAAE,EAHF;AAILC,IAAAA,SAAS,EAAE;AAJN,GADY;AAQrBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAE;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAC;AAFF,KADA;AAKRC,IAAAA,UAAU,EAAC;AACPC,MAAAA,IAAI,EAAE;AADC;AALH;AARS,CAAzB,C,CAoBA;;AACA,MAAMC,SAAS,GAAGb,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAE,YADoB;AAE1BW,EAAAA,YAAY,EAAEb,gBAFY;AAG1Bc,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAOC,MAAP,EAAc;AACrBD,MAAAA,KAAK,CAACf,QAAN,GAAiB,EACb,GAAGgB,MAAM,CAACC;AADG,OAAjB;AAGH,KALK;;AAMNC,IAAAA,aAAa,CAACH,KAAD,EAAOC,MAAP,EAAc;AACvBD,MAAAA,KAAK,CAACV,UAAN,CAAiBW,MAAM,CAACC,OAAP,CAAeE,QAAhC,IAA4C;AACxCZ,QAAAA,MAAM,EAAGS,MAAM,CAACC,OAAP,CAAeV,MAAf,IAAyB,EADM;AAExCC,QAAAA,KAAK,EAAGQ,MAAM,CAACC,OAAP,CAAeT,KAAf,IAAwBY;AAFQ,OAA5C;AAIH;;AAXK;AAHgB,CAAD,CAA7B;AAiBA,OAAO,MAAMC,WAAW,GAAGV,SAAS,CAACW,OAA9B;AAIP,OAAO,MAAMC,UAAU,GAAIC,cAAD,IAAmB;AACzC,MAAIC,CAAC,GAAG,CAAR;AACA,SAAQC,QAAD,IAAc;AACjB;AACAA,IAAAA,QAAQ,CAACL,WAAW,CAACH,aAAZ,CAA0B;AAACX,MAAAA,MAAM,EAAC,SAAR;AAAkBY,MAAAA,QAAQ,EAAC;AAA3B,KAA1B,CAAD,CAAR;;AACF,QAAGM,CAAC,KAAK,CAAT,EAAW;AACP,aAAOE,OAAO,CAACC,GAAR,CAAY,oEAAZ,CAAP;AACH,KALkB,CAMnB;;;AACAF,IAAAA,QAAQ,CAACL,WAAW,CAACH,aAAZ,CAA0B;AACjCC,MAAAA,QAAQ,EAAE,QADuB;AAEjCZ,MAAAA,MAAM,EAAE;AAFyB,KAA1B,CAAD,CAAR;AAIFmB,IAAAA,QAAQ,CAACL,WAAW,CAACP,WAAZ,CAAwBU,cAAxB,CAAD,CAAR;AACC,GAZD;AAaH,CAfM;AAkBP,eAAeb,SAAS,CAACkB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n//Form initial State \nconst initialFormState = { \n    formData:{\n        name: '',\n        phoneNumber: '',\n        email: '',\n        dateBirth: '',\n\n    },\n    operations: {\n        update: {\n            status: '',\n            error:''\n        },\n        updateStep:{\n            next: \"false\",\n        }\n        \n    }\n}\n\n//Form slice initialization \nconst formSlice = createSlice({\n    name: 'signupForm',\n    initialState: initialFormState,\n    reducers: {\n        setFormData(state,action){\n            state.formData = {\n                ...action.payload,\n            };\n        },\n        setOperations(state,action){\n            state.operations[action.payload.function] = {\n                status : action.payload.status || '',\n                error : action.payload.error || undefined\n            };\n        },\n    }\n});\nexport const formActions = formSlice.actions;\n\n\n\nexport const updateForm = (updateFormData) =>{\n    var x = 1;\n    return (dispatch) => {\n        // Setting the operations as pending\n        dispatch(formActions.setOperations({status:'Pending',function:'update'}))\n      if(x === 1){\n          return console.log(\"You pass the check and now you will make the operations as success\");\n      }\n      // If you don't find any error above you can set operations as Success and set the data.\n      dispatch(formActions.setOperations({\n        function: 'update',\n        status: 'Success'\n    }));\n    dispatch(formActions.setFormData(updateFormData));\n    }\n}\n\n\nexport default formSlice.reducer;"]},"metadata":{},"sourceType":"module"}