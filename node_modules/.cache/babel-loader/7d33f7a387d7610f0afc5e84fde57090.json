{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/signup_process.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport StepProgressBar from \"react-step-progress\";\nimport \"react-step-progress/dist/index.css\";\nimport \"../index.css\";\nimport \"../App.css\";\nimport Step1 from \"./step1\";\nimport Step2 from \"./step2\";\nimport Step3 from \"./step3\";\nimport Step4 from \"./step4\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formActions } from \"../store/form-data-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const onSubmit = () => {\n    alert(\"submit data\");\n  };\n\n  const dispatch = useDispatch();\n  const formData = useSelector(state => state.formData.formData);\n  const curFormData = useRef(formData);\n  curFormData.current = formData;\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const curOperations = useRef(nextOperations);\n  curOperations.current = nextOperations;\n  const [nextStep, setNextStep] = useState(\"Failed\");\n  const curNextStep = useRef(nextStep);\n  curNextStep.current = nextStep;\n  useEffect(() => {\n    // If the operations has change that means the user passed the validator\n    if (nextOperations.status === \"Success\") {\n      console.log(\"Operations next change to Success\");\n      setNextStep(\"Success\");\n    } else if (nextOperations.status === \"Pending\") {\n      console.log(\"Operations next change to Pending\");\n      setNextStep(\"Pending\");\n    } else if (nextOperations.status === \"Failed\") {\n      console.log(\"Operations next change to Failed\");\n      setNextStep(\"Failed\");\n    } // Whenever dispatch called, and variables nextStep and status of iperations has change the component re-render\n\n  }, [nextStep, nextOperations.status, dispatch]);\n\n  const validate1 = () => {\n    //Case 1\n    if (curNextStep.current === \"Failed\" && curOperations.current.error === \"\" || curNextStep.current === \"Success\" && curFormData.current.name === \"\") {\n      dispatch(formActions.setOperations({\n        function: \"update\",\n        status: \"Failed\",\n        error: \"Please fill in the fields\"\n      }));\n      return false;\n    } //Case 2\n\n\n    if (curNextStep.current === \"Failed\" && curOperations.current.error === \"\") {\n      return false;\n    } //Case 3\n\n\n    if (curNextStep.current === \"Pending\" && curOperations.current.error !== \"\") {\n      return false;\n    } //Case 4\n\n\n    if (curNextStep.current === \"Success\") {\n      // Accross all over the world,  the for a phone number length is min 4 and max 15 (without country code)\n      if (curFormData.current.phoneNumber.length < 7 || curFormData.current.phoneNumber.length > 15) {\n        console.log(\"Inside check number\");\n        dispatch(formActions.setOperations({\n          function: \"update\",\n          status: \"Failed\",\n          error: \"A phone number can not be less than 7 and more than 15 numbers\"\n        }));\n        return false;\n      }\n    } // Case win\n\n\n    return true;\n  };\n\n  const validate2 = () => {\n    console.log(\"Step 2 valid\");\n    if (curOperations.current.status === \"Success\") return true;\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(StepProgressBar, {\n      startingStep: 0,\n      wrapperClass: \"progress-wrapper-custom\",\n      onSubmit: onSubmit,\n      submitBtnName: \"Submit\",\n      previousBtnName: \"Back\",\n      nextBtnName: \"Next\",\n      steps: [{\n        label: \"Step 1\",\n        name: \"step 1\",\n        content: /*#__PURE__*/_jsxDEV(Step1, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 22\n        }, this),\n        // validator: validate1,\n        validator: () => true\n      }, {\n        label: \"Step 2\",\n        name: \"step 2\",\n        content: /*#__PURE__*/_jsxDEV(Step2, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 22\n        }, this),\n        validator: validate2\n      }, {\n        label: \"Step 3\",\n        name: \"step 3\",\n        content: /*#__PURE__*/_jsxDEV(Step3, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 22\n        }, this),\n        validator: () => curNextStep.current\n      }, {\n        label: \"Step 4\",\n        name: \"step 4\",\n        content: /*#__PURE__*/_jsxDEV(Step4, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 22\n        }, this)\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qegmjHChZgWDmMIx7W8OAu9YRJI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/signup_process.js"],"names":["React","useState","useEffect","useRef","StepProgressBar","Step1","Step2","Step3","Step4","useDispatch","useSelector","formActions","App","onSubmit","alert","dispatch","formData","state","curFormData","current","nextOperations","operations","update","curOperations","nextStep","setNextStep","curNextStep","status","console","log","validate1","error","name","setOperations","function","phoneNumber","length","validate2","label","content","validator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport StepProgressBar from \"react-step-progress\";\nimport \"react-step-progress/dist/index.css\";\nimport \"../index.css\";\nimport \"../App.css\";\nimport Step1 from \"./step1\";\nimport Step2 from \"./step2\";\nimport Step3 from \"./step3\";\nimport Step4 from \"./step4\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formActions } from \"../store/form-data-slice\";\n\nfunction App() {\n  const onSubmit = () => {\n    alert(\"submit data\");\n  };\n  const dispatch = useDispatch();\n  const formData = useSelector((state) => state.formData.formData);\n  const curFormData = useRef(formData);\n  curFormData.current = formData;\n\n  const nextOperations = useSelector(\n    (state) => state.formData.operations.update\n  );\n  const curOperations = useRef(nextOperations);\n  curOperations.current = nextOperations;\n\n  const [nextStep, setNextStep] = useState(\"Failed\");\n  const curNextStep = useRef(nextStep);\n  curNextStep.current = nextStep;\n\n  useEffect(() => {\n    // If the operations has change that means the user passed the validator\n    if (nextOperations.status === \"Success\") {\n      console.log(\"Operations next change to Success\");\n      setNextStep(\"Success\");\n    } else if (nextOperations.status === \"Pending\") {\n      console.log(\"Operations next change to Pending\");\n      setNextStep(\"Pending\");\n    } else if (nextOperations.status === \"Failed\") {\n      console.log(\"Operations next change to Failed\");\n      setNextStep(\"Failed\");\n    }\n\n    // Whenever dispatch called, and variables nextStep and status of iperations has change the component re-render\n  }, [nextStep, nextOperations.status, dispatch]);\n\n  const validate1 = () => {\n\n    //Case 1\n    if ( (curNextStep.current === \"Failed\" && curOperations.current.error === \"\") || (curNextStep.current === \"Success\" && curFormData.current.name === \"\")) {\n      dispatch(\n        formActions.setOperations({\n          function: \"update\",\n          status: \"Failed\",\n          error: \"Please fill in the fields\",\n        })\n      );\n      return false;\n    }\n    \n    //Case 2\n    if ( curNextStep.current === \"Failed\" && curOperations.current.error === \"\") {\n      return false;\n    }\n    \n    //Case 3\n    if (curNextStep.current === \"Pending\" && curOperations.current.error !== \"\"){\n\n      return false;\n    }\n\n    //Case 4\n    if(curNextStep.current === \"Success\"){\n    // Accross all over the world,  the for a phone number length is min 4 and max 15 (without country code)\n    if(curFormData.current.phoneNumber.length < 7 || curFormData.current.phoneNumber.length > 15) {\n      console.log(\"Inside check number\");\n      dispatch(\n        formActions.setOperations({\n          function: \"update\",\n          status: \"Failed\",\n          error:\n            \"A phone number can not be less than 7 and more than 15 numbers\",\n        })\n      );\n      return false;\n    }\n  }\n\n    // Case win\n    return true;\n  };\n\n\nconst validate2  = () => {\n  console.log(\"Step 2 valid\");\n\n  if(curOperations.current.status === \"Success\")\n  return true;\n  \n  return false;\n}\n\n\n  return (\n    <div className=\"app\">\n      <StepProgressBar\n        startingStep={0}\n        wrapperClass=\"progress-wrapper-custom\"\n        onSubmit={onSubmit}\n        submitBtnName=\"Submit\"\n        previousBtnName=\"Back\"\n        nextBtnName=\"Next\"\n        steps={[\n          {\n            label: \"Step 1\",\n            name: \"step 1\",\n            content: <Step1 />,\n            // validator: validate1,\n            validator: () => true,\n          },\n          {\n            label: \"Step 2\",\n            name: \"step 2\",\n            content: <Step2 />,\n            validator: validate2,\n          },\n          {\n            label: \"Step 3\",\n            name: \"step 3\",\n            content: <Step3 />,\n            validator: () => curNextStep.current,\n          },\n          {\n            label: \"Step 4\",\n            name: \"step 4\",\n            content: <Step4 />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}