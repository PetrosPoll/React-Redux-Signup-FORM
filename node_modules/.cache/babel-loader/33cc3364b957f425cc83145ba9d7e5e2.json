{"ast":null,"code":"import { useReducer, useState, useEffect, createElement } from 'react';\nvar styles = {\n  \"progress-bar-wrapper\": \"_53Ji7\",\n  \"step-progress-bar\": \"_1Lo2h\",\n  \"progress-step\": \"_2Jtxm\",\n  \"step-index\": \"_2kL0S\",\n  \"step-icon\": \"_2JvrO\",\n  \"step-label\": \"_1hzhf\",\n  \"step-label-subtitle\": \"_1ixJ3\",\n  \"completed\": \"_2ZUAI\",\n  \"spring-down\": \"_3SDnc\",\n  \"current\": \"_35Ago\",\n  \"spring-up\": \"_JAh3L\",\n  \"has-error\": \"_1CcaK\",\n  \"shake\": \"_1ujce\",\n  \"step-content\": \"_2_g61\",\n  \"step-buttons\": \"_3uApM\",\n  \"step-action-btn\": \"_2pGos\",\n  \"action-btn-secondary\": \"_3CDiP\",\n  \"action-btn-primary\": \"_hsN1w\",\n  \"disabled\": \"_2RWmX\"\n};\nvar StepStates;\n\n(function (StepStates) {\n  StepStates[\"NOT_STARTED\"] = \"not_started\";\n  StepStates[\"CURRENT\"] = \"current\";\n  StepStates[\"ERROR\"] = \"error\";\n  StepStates[\"COMPLETED\"] = \"completed\";\n})(StepStates || (StepStates = {}));\n\nfunction stepsReducer(steps, action) {\n  return steps.map(function (step, i) {\n    if (i < action.payload.index) {\n      step.state = StepStates.COMPLETED;\n    } else if (i === action.payload.index) {\n      step.state = action.payload.state;\n    } else {\n      step.state = StepStates.NOT_STARTED;\n    }\n\n    return step;\n  });\n}\n\nfunction StepProgressBar(props) {\n  var steps = props.steps,\n      startingStep = props.startingStep,\n      wrapperClass = props.wrapperClass,\n      progressClass = props.progressClass,\n      stepClass = props.stepClass,\n      labelClass = props.labelClass,\n      subtitleClass = props.subtitleClass,\n      contentClass = props.contentClass,\n      buttonWrapperClass = props.buttonWrapperClass,\n      primaryBtnClass = props.primaryBtnClass,\n      secondaryBtnClass = props.secondaryBtnClass,\n      submitBtnName = props.submitBtnName,\n      onSubmit = props.onSubmit,\n      previousBtnName = props.previousBtnName,\n      nextBtnName = props.nextBtnName;\n\n  var _React$useReducer = useReducer(stepsReducer, steps),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  var _React$useState = useState(startingStep),\n      currentIndex = _React$useState[0],\n      setCurrentIndex = _React$useState[1];\n\n  useEffect(function () {\n    dispatch({\n      type: 'init',\n      payload: {\n        index: currentIndex,\n        state: StepStates.CURRENT\n      }\n    });\n  }, []);\n\n  function submitHandler() {\n    onSubmit();\n  }\n\n  function nextHandler() {\n    if (currentIndex === steps.length - 1) {\n      return;\n    }\n\n    var isStateValid = true;\n    var stepValidator = state[currentIndex].validator;\n\n    if (stepValidator) {\n      isStateValid = stepValidator();\n    }\n\n    dispatch({\n      type: 'next',\n      payload: {\n        index: isStateValid ? currentIndex + 1 : currentIndex,\n        state: isStateValid ? StepStates.CURRENT : StepStates.ERROR\n      }\n    });\n\n    if (isStateValid) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  }\n\n  function prevHandler() {\n    if (currentIndex === 0) {\n      return;\n    }\n\n    dispatch({\n      type: 'previous',\n      payload: {\n        index: currentIndex - 1,\n        state: StepStates.CURRENT\n      }\n    });\n    setCurrentIndex(currentIndex - 1);\n  }\n\n  return createElement(\"div\", {\n    className: styles['progress-bar-wrapper'] + \" \" + (wrapperClass || '')\n  }, createElement(\"ul\", {\n    className: styles['step-progress-bar'] + \" \" + (progressClass || '')\n  }, state.map(function (step, i) {\n    return createElement(\"li\", {\n      key: i,\n      className: \"\" + styles['progress-step'] + (step.state === StepStates.COMPLETED ? \" \" + styles.completed : '') + (step.state === StepStates.CURRENT ? \" \" + styles.current : '') + (step.state === StepStates.ERROR ? \" \" + styles['has-error'] : '') + \" \" + (stepClass || '')\n    }, step.state === StepStates.COMPLETED && createElement(\"span\", {\n      className: styles['step-icon']\n    }, createElement(\"svg\", {\n      width: \"1.5rem\",\n      viewBox: \"0 0 13 9\",\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, createElement(\"path\", {\n      d: \"M1 3.5L4.5 7.5L12 1\",\n      stroke: \"white\",\n      strokeWidth: \"1.5\"\n    }))), step.state === StepStates.ERROR && createElement(\"span\", {\n      className: styles['step-icon']\n    }, \"!\"), step.state !== StepStates.COMPLETED && step.state !== StepStates.ERROR && createElement(\"span\", {\n      className: styles['step-index']\n    }, i + 1), createElement(\"div\", {\n      className: styles['step-label'] + \" \" + (labelClass || '')\n    }, step.label, step.subtitle && createElement(\"div\", {\n      className: styles['step-label-subtitle'] + \" \" + (subtitleClass || '')\n    }, step.subtitle)));\n  })), createElement(\"div\", {\n    className: styles['step-content'] + \" \" + (contentClass || '')\n  }, state[currentIndex].content), createElement(\"div\", {\n    className: styles['step-buttons'] + \" \" + (buttonWrapperClass || '')\n  }, createElement(\"a\", {\n    className: styles['step-action-btn'] + \" \" + styles['action-btn-secondary'] + \" \" + (currentIndex === 0 ? styles.disabled : '') + \" \" + (secondaryBtnClass || ''),\n    onClick: prevHandler\n  }, previousBtnName ? previousBtnName : 'Previous'), currentIndex === state.length - 1 ? createElement(\"a\", {\n    className: styles['step-action-btn'] + \" \" + styles['action-btn-primary'] + \" \" + (primaryBtnClass || ''),\n    onClick: submitHandler\n  }, submitBtnName || 'Submit') : createElement(\"a\", {\n    className: styles['step-action-btn'] + \" \" + styles['action-btn-primary'] + \" \" + (primaryBtnClass || ''),\n    onClick: nextHandler\n  }, nextBtnName ? nextBtnName : 'Next')));\n}\n\nexport default StepProgressBar;","map":{"version":3,"sources":["../src/models/index.ts","../src/index.tsx"],"names":["StepStates","i","action","step","steps","startingStep","wrapperClass","progressClass","stepClass","labelClass","subtitleClass","contentClass","buttonWrapperClass","primaryBtnClass","secondaryBtnClass","submitBtnName","onSubmit","previousBtnName","nextBtnName","props","state","dispatch","React","currentIndex","setCurrentIndex","type","payload","index","CURRENT","isStateValid","stepValidator","ERROR","className","styles","key","width","viewBox","fill","xmlns","d","stroke","strokeWidth","onClick","prevHandler","submitHandler","nextHandler"],"mappings":"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","sourcesContent":["export enum StepStates {\n  NOT_STARTED = 'not_started',\n  CURRENT = 'current',\n  ERROR = 'error',\n  COMPLETED = 'completed'\n}\n\nexport interface ProgressStep {\n  label: string;\n  subtitle?: string;\n  name: string;\n  state?: StepStates;\n  content: React.ReactNode;\n  validator?: (payload?: any) => boolean;\n}\n\nexport interface StepProgressProps {\n  steps: ProgressStep[];\n  startingStep: number;\n  wrapperClass?: string;\n  progressClass?: string;\n  stepClass?: string;\n  labelClass?: string;\n  subtitleClass?: string;\n  contentClass?: string;\n  buttonWrapperClass?: string;\n  primaryBtnClass?: string;\n  secondaryBtnClass?: string;\n  submitBtnName?: string;\n  onSubmit: Function;\n  previousBtnName?: string;\n  nextBtnName?: string;\n}\n\nexport interface ReducerAction {\n  type: string;\n  payload: { index: number; state: StepStates };\n}\n","import * as React from 'react';\nimport styles from './styles.module.css';\n\nimport { StepStates, ProgressStep, StepProgressProps, ReducerAction } from './models';\n\nfunction stepsReducer(steps: ProgressStep[], action: ReducerAction): ProgressStep[] {\n\n  return steps.map(function (step, i) {\n\n    if (i < action.payload.index) {\n      step.state = StepStates.COMPLETED;\n    } else if (i === action.payload.index) {\n      step.state = action.payload.state;\n    } else {\n      step.state = StepStates.NOT_STARTED;\n    }\n    return step;\n  });\n}\n\nfunction StepProgressBar(props: StepProgressProps): JSX.Element {\n  const {\n    steps,\n    startingStep,\n    wrapperClass,\n    progressClass,\n    stepClass,\n    labelClass,\n    subtitleClass,\n    contentClass,\n    buttonWrapperClass,\n    primaryBtnClass,\n    secondaryBtnClass,\n    submitBtnName,\n    onSubmit,\n    previousBtnName,\n    nextBtnName\n  } = props;\n  const [state, dispatch] = React.useReducer(stepsReducer, steps);\n  const [currentIndex, setCurrentIndex] = React.useState(startingStep);\n\n  React.useEffect(function () {\n    dispatch({\n      type: 'init',\n      payload: { index: currentIndex, state: StepStates.CURRENT }\n    });\n  }, []);\n\n  function submitHandler(): void {\n    onSubmit();\n  }\n\n  function nextHandler(): void {\n\n    if (currentIndex === steps.length - 1) {\n      return;\n    }\n    let isStateValid = true;\n    const stepValidator = state[currentIndex].validator;\n\n    if (stepValidator) {\n      isStateValid = stepValidator();\n    }\n    dispatch({\n      type: 'next',\n      payload: {\n        index: isStateValid ? currentIndex + 1 : currentIndex,\n        state: isStateValid ? StepStates.CURRENT : StepStates.ERROR\n      }\n    });\n\n    if (isStateValid) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  }\n\n  function prevHandler(): void {\n\n    if (currentIndex === 0) {\n      return;\n    }\n\n    dispatch({\n      type: 'previous',\n      payload: {\n        index: currentIndex - 1,\n        state: StepStates.CURRENT\n      }\n    });\n    setCurrentIndex(currentIndex - 1);\n  }\n\n  return (\n    <div className={`${styles['progress-bar-wrapper']} ${wrapperClass || ''}`}>\n      <ul className={`${styles['step-progress-bar']} ${progressClass || ''}`}>\n        {state.map(function (step, i) {\n          return (\n            <li\n              key={i}\n              className={`${styles['progress-step']}${\n                step.state === StepStates.COMPLETED ? ` ${styles.completed}` : ''\n              }${step.state === StepStates.CURRENT ? ` ${styles.current}` : ''}${\n                step.state === StepStates.ERROR ? ` ${styles['has-error']}` : ''\n              } ${stepClass || ''}`}\n            >\n              {step.state === StepStates.COMPLETED && (\n                <span className={styles['step-icon']}>\n                  <svg\n                    width=\"1.5rem\"\n                    viewBox=\"0 0 13 9\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path d=\"M1 3.5L4.5 7.5L12 1\" stroke=\"white\" strokeWidth=\"1.5\" />\n                  </svg>\n                </span>\n              )}\n              {step.state === StepStates.ERROR && <span className={styles['step-icon']}>!</span>}\n              {step.state !== StepStates.COMPLETED && step.state !== StepStates.ERROR && (\n                <span className={styles['step-index']}>{i + 1}</span>\n              )}\n              <div className={`${styles['step-label']} ${labelClass || ''}`}>\n                {step.label}\n                {step.subtitle && (\n                  <div className={`${styles['step-label-subtitle']} ${subtitleClass || ''}`}>\n                    {step.subtitle}\n                  </div>\n                )}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className={`${styles['step-content']} ${contentClass || ''}`}>\n        {state[currentIndex].content}\n      </div>\n\n      <div className={`${styles['step-buttons']} ${buttonWrapperClass || ''}`}>\n        <a\n          className={`${styles['step-action-btn']} ${styles['action-btn-secondary']} ${\n            currentIndex === 0 ? styles.disabled : ''\n          } ${secondaryBtnClass || ''}`}\n          onClick={prevHandler}\n        >\n          {previousBtnName ? previousBtnName : 'Previous'}\n        </a>\n        {currentIndex === state.length - 1 ? (\n          <a\n            className={`${styles['step-action-btn']} ${styles['action-btn-primary']} ${\n              primaryBtnClass || ''\n            }`}\n            onClick={submitHandler}\n          >\n            {submitBtnName || 'Submit'}\n          </a>\n        ) : (\n          <a\n            className={`${styles['step-action-btn']} ${styles['action-btn-primary']} ${\n              primaryBtnClass || ''\n            }`}\n            onClick={nextHandler}\n          >\n            {nextBtnName ? nextBtnName : 'Next'}\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default StepProgressBar;\n"]},"metadata":{},"sourceType":"module"}