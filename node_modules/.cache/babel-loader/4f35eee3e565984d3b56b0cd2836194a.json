{"ast":null,"code":"var _jsxFileName = \"/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport validator from \"validator\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport '../App.css'; // Styles for the component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  // root: {\n  //     padding: 20,\n  //     marginTop: 30,\n  // },\n  error: {\n    maxWidth: 350,\n    color: \"red\"\n  },\n  errorCard: {\n    padding: 15,\n    marginTop: 20\n  },\n  textField: {\n    width: 300,\n    marginTop: 20,\n    marginBottom: 20\n  },\n  root: {\n    flexGrow: 1\n  },\n  paperStyle: {\n    paddingBottom: 40\n  }\n}));\n\nconst Step1 = () => {\n  _s();\n\n  const classes = useStyles();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const nextOperations = useSelector(state => state.formData.operations.update);\n  const formData = useSelector(state => state.formData.formData);\n  useEffect(() => {\n    // Set phone number to input when you come back from another step\n    setPhoneNumber(formData.phoneNumber);\n  }, [formData.phoneNumber]); // Handler function for name input\n\n  const nameChangeHandler = e => {\n    if (validator.isLength(e.target.value.trim(), {\n      min: 3,\n      max: 10\n    })) {\n      dispatch(formActions.setOperations({\n        function: \"update\",\n        status: \"Success\"\n      })); // Pass the data to the store\n\n      dispatch(updateForm({\n        name: e.target.value.trim()\n      }));\n    } else {\n      // Set a new error\n      dispatch(formActions.setOperations({\n        function: \"update\",\n        status: \"Pending\",\n        error: \"Name must be between 3 and 10 characters!\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        px: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        id: \"paperStyle\",\n        className: classes.paperStyle,\n        sx: {\n          maxWidth: 500,\n          my: 1,\n          mx: \"auto\",\n          p: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true // direction=\"column\"\n          ,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          wrap: \"wrap\",\n          spacing: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            xs: true,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              style: {\n                textAlign: \"center\"\n              },\n              component: \"div\",\n              variant: \"h5\",\n              children: [/*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 54\n              }, this), \"Step 1\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              direction: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.textField,\n                label: \"name\",\n                defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,\n                variant: \"outlined\",\n                type: \"text\",\n                name: \"Name\",\n                onChange: nameChangeHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n                placeholder: \"Enter phone number\",\n                value: phoneNumber,\n                onChange: phone => {\n                  dispatch(updateForm({\n                    phoneNumber: phone\n                  }));\n                },\n                country: \"gr\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), nextOperations.error && /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          maxWidth: 500,\n          my: 1,\n          mx: \"auto\",\n          p: 2\n        },\n        className: classes.errorCard,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              paragraph: true,\n              className: classes.error,\n              variant: \"body1\",\n              children: /*#__PURE__*/_jsxDEV(ErrorOutlineOutlinedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"div\",\n              noWrap: false,\n              paragraph: true,\n              className: classes.error,\n              variant: \"body1\",\n              children: nextOperations.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Step1, \"y/3VV06Fb18NP76w8mEuQKqhjY4=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = Step1;\nexport default Step1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step1\");","map":{"version":3,"sources":["/Users/petros6000/Desktop/Intouch Games/signup-form/src/components/step1.js"],"names":["React","useState","useEffect","LockOutlinedIcon","TextField","makeStyles","validator","ErrorOutlineOutlinedIcon","useDispatch","useSelector","updateForm","formActions","PhoneInput","Box","Paper","Grid","Typography","useStyles","theme","error","maxWidth","color","errorCard","padding","marginTop","textField","width","marginBottom","root","flexGrow","paperStyle","paddingBottom","Step1","classes","phoneNumber","setPhoneNumber","dispatch","nextOperations","state","formData","operations","update","nameChangeHandler","e","isLength","target","value","trim","min","max","setOperations","function","status","name","px","my","mx","p","textAlign","phone"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport validator from \"validator\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateForm, formActions } from \"../store/form-data-slice\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport '../App.css';\n\n\n\n// Styles for the component\nconst useStyles = makeStyles((theme) => ({\n    // root: {\n    //     padding: 20,\n    //     marginTop: 30,\n    // },\n    error: {\n        maxWidth: 350,\n        color: \"red\",\n    },\n    errorCard: {\n        padding: 15,\n        marginTop: 20,\n    },\n    textField: {\n        width: 300,\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    root: {\n        flexGrow: 1,\n    },\n    paperStyle: {\n        paddingBottom: 40,\n    },\n}));\n\nconst Step1 = () => {\n    const classes = useStyles();\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const dispatch = useDispatch();\n    const nextOperations = useSelector(\n        (state) => state.formData.operations.update\n    );\n    const formData = useSelector((state) => state.formData.formData);\n\n    useEffect(() => {\n        // Set phone number to input when you come back from another step\n        setPhoneNumber(formData.phoneNumber);\n    }, [formData.phoneNumber]);\n\n    // Handler function for name input\n    const nameChangeHandler = (e) => {\n        if (validator.isLength(e.target.value.trim(), { min: 3, max: 10 })) {\n            dispatch(\n                formActions.setOperations({\n                    function: \"update\",\n                    status: \"Success\",\n                })\n            );\n\n            // Pass the data to the store\n            dispatch(updateForm({ name: e.target.value.trim() }));\n        } else {\n            // Set a new error\n            dispatch(\n                formActions.setOperations({\n                    function: \"update\",\n                    status: \"Pending\",\n                    error: \"Name must be between 3 and 10 characters!\",\n                })\n            );\n        }\n    };\n\n    return (\n        <>\n            <Box sx={{ flexGrow: 1, px: 3 }}>\n                <Paper\n                    id=\"paperStyle\"\n                    className={classes.paperStyle}\n                    sx={{ maxWidth: 500, my: 1, mx: \"auto\", p: 2 }}\n                >\n                    <Grid\n                        container\n                        // direction=\"column\"\n                        justifyContent=\"center\"\n                        alignItems=\"center\"\n                        wrap=\"wrap\"\n                        spacing={2}\n                    >\n                        <Grid container item xs>\n                            <Typography\n                                style={{ textAlign: \"center\" }}\n                                component=\"div\"\n                                variant=\"h5\"\n                            >\n                                <LockOutlinedIcon /> <br />\n                                Step 1\n                            </Typography>\n\n                        <Grid item direction=\"column\"\n                        justifyContent=\"center\"\n                        alignItems=\"center\">\n                                <TextField\n                                className={classes.textField}\n                                label=\"name\"\n                                defaultValue={formData?.name}\n                                variant=\"outlined\"\n                                type=\"text\"\n                                name=\"Name\"\n                                onChange={nameChangeHandler}\n                                ></TextField>\n                            \n                            <br />\n                            <PhoneInput\n                                placeholder=\"Enter phone number\"\n                                value={phoneNumber}\n                                onChange={(phone) => {\n                                    dispatch(updateForm({ phoneNumber: phone }));\n                                }}\n                                country={\"gr\"}\n                            />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n\n                {nextOperations.error && (\n                    <Paper\n                        sx={{ maxWidth: 500, my: 1, mx: \"auto\", p: 2 }}\n                        className={classes.errorCard}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <Typography\n                                    component=\"div\"\n                                    paragraph={true}\n                                    className={classes.error}\n                                    variant=\"body1\"\n                                >\n                                    <ErrorOutlineOutlinedIcon />\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography\n                                    component=\"div\"\n                                    noWrap={false}\n                                    paragraph={true}\n                                    className={classes.error}\n                                    variant=\"body1\"\n                                >\n                                    {nextOperations.error}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                )}\n            </Box>\n        </>\n    );\n};\n\nexport default Step1;\n"]},"metadata":{},"sourceType":"module"}